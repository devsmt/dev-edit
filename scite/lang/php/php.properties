
file.patterns.php=*.php;*.php3;*.phtml
filter.php=PHP (php php3 phtml)|$(file.patterns.php)|

# 
word.characters.$(file.patterns.php)=$(chars.alnum)_$
# 
#whitespace.characters.$(file.patterns.php)=
# 
abbreviations.$(file.patterns.php)=$(SciteDefaultHome)/lang/php/php.abbrev
api.$(file.patterns.php)=$(SciteDefaultHome)/lang/php/php.api;$(SciteDefaultHome)/lang/php/php.consts.api;
lexer.$(file.patterns.php)=hypertext

# 
autocomplete.hypertext.ignorecase=0

# 
keywords.$(file.patterns.php)=$(keywordclass.html)
# 
keywords2.$(file.patterns.php)=$(keywordclass.javascript)
# 
keywords5.$(file.patterns.php)=$(keywordclass.php)
# 
keywords7.$(file.patterns.php)=$(keywordclass2.php)
# 
keywords8.$(file.patterns.php)=$(keywordclass3.php)
# 
keywords9.$(file.patterns.php)=$(keywordclass4.php)

# 
view.indentation.examine.$(file.patterns.php)=3

# 
tab.size.$(file.patterns.php)=4
indent.size.$(file.patterns.php)=4
use.tabs.$(file.patterns.php)=0

indent.maintain.$(file.patterns.php)=0
statement.indent.$(file.patterns.php)=103 if else elseif do for foreach while switch try
statement.end.$(file.patterns.php)=127 ;
statement.lookback.$(file.patterns.php)=1
block.start.$(file.patterns.php)=127 {
block.end.$(file.patterns.php)=127 }


comment.block.$(file.patterns.php)=//
comment.block.at.line.start.$(file.patterns.php)=1
comment.stream.start.$(file.patterns.php)=/*
comment.stream.end.$(file.patterns.php)=*/
comment.box.start.$(file.patterns.php)=/**
comment.box.middle.$(file.patterns.php)= *
comment.box.end.$(file.patterns.php)= */

# Call Tips settings
calltip.hypertext.end.definition=)
calltip.hypertext.word.characters=->_$(chars.alpha)
calltip.hypertext.ignorecase=1


# TODO: aprire il browser alla pagina del manuale
command.help.$(file.patterns.php)=$(CurrentWord)!$(SciteDefaultHome)/lang/php/php_manual_en.chm
command.help.subsystem.$(file.patterns.php)=4


#--------------------------------------------------------------------------------
# PHP syntax highlighting
#--------------------------------------------------------------------------------

style.php.118=fore:#CD1C69,back:#25272B,eolfilled
# Matching braces
#style.php.34=fore:#E21E1E,back:#25272B,font=Monospace,size:12
# Not maching braces
style.php.35=fore:#FF0000,back:#25272B,font=Monospace,size:12
# Double quoted String
style.php.119=fore:#E17C4A,back:#25272B
# Single quoted string
style.php.120=fore:#F6E443,back:#25272B
# Keyword
style.php.121=fore:#FCFDFA,back:#25272B
# Number
style.php.122=fore:#CC9900,back:#25272B,
# Variable
style.php.123=fore:#53B6F0,back:#25272B
# Comment
style.php.124=fore:#999999,$(font.comment),back:#25272B,eolfilled
# One line comment
style.php.125=fore:#929394,$(font.comment),back:#25272B
# PHP variable in double quoted string
style.php.126=fore:#00007F,italics,back:#25272B
# PHP operator
style.php.127=fore:#FCFDFA,back:#25272B



# estensioni in lua per PHP
#extension.$(file.patterns.php)=$(SciteDefaultHome)/lang/php/php.lua

#--------------------------------------------------------------------------------
# LUA
#--------------------------------------------------------------------------------

# Alt+T
# command.name.1.$(file.patterns.php)=Open TPL
# command.subsystem.1.$(file.patterns.php)=3
# command.1.$(file.patterns.php)=php_open_tpl
# command.mode.1.$(file.patterns.php)=savebefore:no
# command.shortcut.1.$(file.patterns.php)=Alt+T

# Alt+C
# command.name.2.$(file.patterns.php)=Open CSS
# command.subsystem.2.$(file.patterns.php)=3
# command.2.$(file.patterns.php)=php_open_css
# command.mode.2.$(file.patterns.php)=savebefore:no
# command.shortcut.2.$(file.patterns.php)=Alt+C

# Alt+J
# command.name.3.$(file.patterns.php)=Open JS
# command.subsystem.3.$(file.patterns.php)=3
# command.3.$(file.patterns.php)=php_open_js
# command.mode.3.$(file.patterns.php)=savebefore:no
# command.shortcut.3.$(file.patterns.php)=Alt+J

# [Expand Snippet]
# command.name.5.$(file.patterns.php)=Expand Snippet
# command.subsystem.5.$(file.patterns.php)=3
# command.5.$(file.patterns.php)=php_snippet
# command.mode.5.$(file.patterns.php)=savebefore:no
# command.shortcut.5.$(file.patterns.php)=Ctrl+9

# Goto Definition]
# ommand.name.6.$(file.patterns.php)=Goto Definition
# ommand.subsystem.6.$(file.patterns.php)=3
# ommand.6.$(file.patterns.php)=GotoDefinition
# ommand.mode.6.$(file.patterns.php)=savebefore:no
# ommand.shortcut.6.$(file.patterns.php)=Ctrl+1


#--------------------------------------------------------------------------------
# default Commands
#--------------------------------------------------------------------------------
php_exe=php
command.go.$(file.patterns.php)=$(php_exe) -ef "$(FilePath)" $(1) $(2) $(3) $(4)
command.go.subsystem.$(file.patterns.php)=0

command.compile.$(file.patterns.php)=$(php_exe) "$(FilePath)"
command.compile.filter.$(file.patterns.php)=1

command.build.$(file.patterns.php)=$(php_exe) "$(FilePath)"
command.build.filter.$(file.patterns.php)=1
command.build.$(file.patterns.php)=$(php_exe) "$(FilePath)"



#--------------------------------------------------------------------------------
# Commands
#--------------------------------------------------------------------------------


[PHP Code Beautifier]
command.name.20.$(file.patterns.php)=PHP Code Beautifier
command.subsystem.20.$(file.patterns.php)=0
phpcb.args=--space-after-if --optimize-eol --space-after-switch --space-after-while --space-before-start-angle-bracket --space-after-end-angle-bracket --extra-padding-for-case-statement --one-true-brace-function-declaration --align-equal-statements --force-large-php-code-tag --glue-amperscore --change-shell-comment-to-double-slashes-comment --indent-with-tab --force-large-php-code-tag --force-true-false-null-contant-lowercase --comment-rendering-style PEAR --padding-char-count 1
command.20.$(file.patterns.php)=$(SciteDefaultHome)/lang/php/phpcb.exe $(phpcb.args) "$(FilePath)"
command.is.filter.20.$(file.patterns.php)=1
command.replace.selection.20.$(file.patterns.php)=2
command.quiet.20.$(file.patterns.php)=1
command.shortcut.20.$(file.patterns.php)=Ctrl+F11
command.save.before.20.$(file.patterns.php)=1

#crea un file di configurazione
# \see http://www.doxygen.nl/config.html
#doxygen -g <config-file>

#per generare la documentazione
#doxygen <config-file>

#--------------------------------------------------------------------------------
# CTags Notes
#--------------------------------------------------------------------------------

# @see http://ctags.sourceforge.net/
#The windows zip file already contains a compiled ctags.exe, so you should not need to do a build yourself.
#Open CMD and have a look at ctags from there.

# Retag
# command.name.21.*=Retag
# command.subsystem.21.*=2
# command.21.*="$(SciteDefaultHome)/ctags" -f "$(FilePath)" \
#   -h ".php" -R \
#   --exclude="\.svn" \
#   --totals=yes \
#   --tag-relative=yes \
#   --PHP-kinds=+cf \
#   --regex-PHP='/abstract class ([^ ]*)/\1/c/' \
#   --regex-PHP='/interface ([^ ]*)/\1/c/' \
#   --regex-PHP='/(public |static |abstract |protected |private )+function ([^ (]*)/\2/f/'

#cd $(ProjectHome);\
#    ctags -f - --c-kinds=+p --excmd=number  src/core/*.h | grep -E "^(kini?|opcode)_" > project.tags; \
#    python $(SciteDefaultHome)/tags2api.py project.tags > project.api \
#    rm project.tags

# #!/bin/bash
# cd /path/to/framework/library
# exec $(SciteDefaultHome)/ctags -f ~/.vim/mytags/framework \
# -h ".php" -R \
# --exclude="\.svn" \
# --totals=yes \
# --tag-relative=yes \
# --PHP-kinds=+cf \
# --regex-PHP='/abstract class ([^ ]*)/\1/c/' \
# --regex-PHP='/interface ([^ ]*)/\1/c/' \
# --regex-PHP='/(public |static |abstract |protected |private )+function ([^ (]*)/\2/f/'
#  
# This script creates the tag index in the file $HOME/.vim/mytags/framework. 
#It scans for PHP files recursively through the tree, excluding any files found in a 
# .svn directory (I'm using a checkout from the subversion repository). The file paths in the index are created relative to the tags file; this was important, because if this wasn't provided, vim was unable to jump to the file, as it couldn't find it. --PHP-kinds=+cf tells it to index classes and functions. Next, I've got three regular expressions. The first tells it to match classes beginning with 'abstract class' as classes. The second tells it to match interfaces as classes. The last is so that PHP 5 methods, which begin with a visibility operator, to be matched as functions.


# I have each project on separate disk (using subst), tags file generated by ctags -R in root of disk. With scite I have this tool:
# 
# command.name.5.*=Read Tags
# command.5.*=readtags.exe -t\tags $(CurrentWord)
# command.save.before.5.*=2
# 
# After Ctrl+5 it finds definitions for current word/selection into output pane, F4 jumps over found entries.
# 
# On Windows, both utils from Exuberant ctags on path (ctags.exe, readtags.exe).




